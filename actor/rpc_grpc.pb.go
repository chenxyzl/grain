// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.1
// source: rpc.proto

package actor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Remoting_Ask_FullMethodName = "/actor.Remoting/Ask"
)

// RemotingClient is the client API for Remoting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemotingClient interface {
	Ask(ctx context.Context, opts ...grpc.CallOption) (Remoting_AskClient, error)
}

type remotingClient struct {
	cc grpc.ClientConnInterface
}

func NewRemotingClient(cc grpc.ClientConnInterface) RemotingClient {
	return &remotingClient{cc}
}

func (c *remotingClient) Ask(ctx context.Context, opts ...grpc.CallOption) (Remoting_AskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Remoting_ServiceDesc.Streams[0], Remoting_Ask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &remotingAskClient{stream}
	return x, nil
}

type Remoting_AskClient interface {
	Send(*Request) error
	Recv() (*Replay, error)
	grpc.ClientStream
}

type remotingAskClient struct {
	grpc.ClientStream
}

func (x *remotingAskClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remotingAskClient) Recv() (*Replay, error) {
	m := new(Replay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemotingServer is the server API for Remoting service.
// All implementations must embed UnimplementedRemotingServer
// for forward compatibility
type RemotingServer interface {
	Ask(Remoting_AskServer) error
	mustEmbedUnimplementedRemotingServer()
}

// UnimplementedRemotingServer must be embedded to have forward compatible implementations.
type UnimplementedRemotingServer struct {
}

func (UnimplementedRemotingServer) Ask(Remoting_AskServer) error {
	return status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (UnimplementedRemotingServer) mustEmbedUnimplementedRemotingServer() {}

// UnsafeRemotingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemotingServer will
// result in compilation errors.
type UnsafeRemotingServer interface {
	mustEmbedUnimplementedRemotingServer()
}

func RegisterRemotingServer(s grpc.ServiceRegistrar, srv RemotingServer) {
	s.RegisterService(&Remoting_ServiceDesc, srv)
}

func _Remoting_Ask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemotingServer).Ask(&remotingAskServer{stream})
}

type Remoting_AskServer interface {
	Send(*Replay) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type remotingAskServer struct {
	grpc.ServerStream
}

func (x *remotingAskServer) Send(m *Replay) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remotingAskServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Remoting_ServiceDesc is the grpc.ServiceDesc for Remoting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Remoting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "actor.Remoting",
	HandlerType: (*RemotingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ask",
			Handler:       _Remoting_Ask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
